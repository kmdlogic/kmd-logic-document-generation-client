// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.DocumentGeneration.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class GenerateDocumentConversionRequest
    {
        /// <summary>
        /// Initializes a new instance of the GenerateDocumentConversionRequest
        /// class.
        /// </summary>
        public GenerateDocumentConversionRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GenerateDocumentConversionRequest
        /// class.
        /// </summary>
        /// <param name="configurationId">Identifier of configuration to be
        /// used.</param>
        /// <param name="sourceDocumentUrl">URL that identifies the document to
        /// be converted.</param>
        /// <param name="sourceDocumentFormat">Possible values include: 'Txt',
        /// 'Rtf', 'Doc', 'Docx', 'Pdf'</param>
        /// <param name="convertedDocumentFormat">Possible values include:
        /// 'Txt', 'Rtf', 'Doc', 'Docx', 'Pdf'</param>
        /// <param name="convertedDocumentPdfFormat">Possible values include:
        /// 'PdfA1A', 'PdfA1B', 'PdfA2A', 'PdfA3A', 'PdfA2B', 'PdfA2U',
        /// 'PdfA3B', 'PdfA3U', 'V13', 'V14', 'V15', 'V16', 'V17', 'PdfUa1',
        /// 'PdfX1A', 'PdfX3'</param>
        /// <param name="callbackUrl">URL that is going to be called when
        /// document generation completes.</param>
        /// <param name="debug">Flag indicating if document generation should
        /// be run in diagnostic mode.</param>
        public GenerateDocumentConversionRequest(System.Guid? configurationId = default(System.Guid?), string sourceDocumentUrl = default(string), string sourceDocumentFormat = default(string), string convertedDocumentFormat = default(string), string convertedDocumentPdfFormat = default(string), string callbackUrl = default(string), bool? debug = default(bool?))
        {
            ConfigurationId = configurationId;
            SourceDocumentUrl = sourceDocumentUrl;
            SourceDocumentFormat = sourceDocumentFormat;
            ConvertedDocumentFormat = convertedDocumentFormat;
            ConvertedDocumentPdfFormat = convertedDocumentPdfFormat;
            CallbackUrl = callbackUrl;
            Debug = debug;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identifier of configuration to be used.
        /// </summary>
        [JsonProperty(PropertyName = "configurationId")]
        public System.Guid? ConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets URL that identifies the document to be converted.
        /// </summary>
        [JsonProperty(PropertyName = "sourceDocumentUrl")]
        public string SourceDocumentUrl { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Txt', 'Rtf', 'Doc', 'Docx',
        /// 'Pdf'
        /// </summary>
        [JsonProperty(PropertyName = "sourceDocumentFormat")]
        public string SourceDocumentFormat { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Txt', 'Rtf', 'Doc', 'Docx',
        /// 'Pdf'
        /// </summary>
        [JsonProperty(PropertyName = "convertedDocumentFormat")]
        public string ConvertedDocumentFormat { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'PdfA1A', 'PdfA1B', 'PdfA2A',
        /// 'PdfA3A', 'PdfA2B', 'PdfA2U', 'PdfA3B', 'PdfA3U', 'V13', 'V14',
        /// 'V15', 'V16', 'V17', 'PdfUa1', 'PdfX1A', 'PdfX3'
        /// </summary>
        [JsonProperty(PropertyName = "convertedDocumentPdfFormat")]
        public string ConvertedDocumentPdfFormat { get; set; }

        /// <summary>
        /// Gets or sets URL that is going to be called when document
        /// generation completes.
        /// </summary>
        [JsonProperty(PropertyName = "callbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if document generation should be run
        /// in diagnostic mode.
        /// </summary>
        [JsonProperty(PropertyName = "debug")]
        public bool? Debug { get; set; }

    }
}
