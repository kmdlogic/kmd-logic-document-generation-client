// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.DocumentGeneration.Client.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class GenerateDocumentRequest
    {
        /// <summary>
        /// Initializes a new instance of the GenerateDocumentRequest class.
        /// </summary>
        public GenerateDocumentRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GenerateDocumentRequest class.
        /// </summary>
        /// <param name="configurationId">Identifier of configuration to be
        /// used.</param>
        /// <param name="hierarchyPath">The hierarchy of possible template
        /// sources not including the master location.
        /// For example, if you have a customer "A0001" with a department
        /// "B0001" then the hierarchy path would be "A0001\\B0001".
        /// If the department has no template source configured then the
        /// customers templates will be used.</param>
        /// <param name="templateId">Identifier of template to be used.</param>
        /// <param name="language">Language code in ISO 639-2 format (eg.
        /// en).</param>
        /// <param name="documentFormat">Possible values include: 'Txt', 'Rtf',
        /// 'Doc', 'Docx', 'Pdf'</param>
        /// <param name="mergeData">Data to be merge into document.</param>
        /// <param name="callbackUrl">URL that is going to be called when
        /// document generation completes.</param>
        /// <param name="debug">Flag indicating if document generation should
        /// be run in diagnostic mode.</param>
        /// <param name="signConfigurationId">Identifier of sign configuration
        /// to be used.</param>
        public GenerateDocumentRequest(System.Guid? configurationId = default(System.Guid?), string hierarchyPath = default(string), string templateId = default(string), string language = default(string), string documentFormat = default(string), object mergeData = default(object), string callbackUrl = default(string), bool? debug = default(bool?), System.Guid? signConfigurationId = default(System.Guid?))
        {
            ConfigurationId = configurationId;
            HierarchyPath = hierarchyPath;
            TemplateId = templateId;
            Language = language;
            DocumentFormat = documentFormat;
            MergeData = mergeData;
            CallbackUrl = callbackUrl;
            Debug = debug;
            SignConfigurationId = signConfigurationId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identifier of configuration to be used.
        /// </summary>
        [JsonProperty(PropertyName = "configurationId")]
        public System.Guid? ConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets the hierarchy of possible template sources not
        /// including the master location.
        /// For example, if you have a customer "A0001" with a department
        /// "B0001" then the hierarchy path would be "A0001\\B0001".
        /// If the department has no template source configured then the
        /// customers templates will be used.
        /// </summary>
        [JsonProperty(PropertyName = "hierarchyPath")]
        public string HierarchyPath { get; set; }

        /// <summary>
        /// Gets or sets identifier of template to be used.
        /// </summary>
        [JsonProperty(PropertyName = "templateId")]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or sets language code in ISO 639-2 format (eg. en).
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Txt', 'Rtf', 'Doc', 'Docx',
        /// 'Pdf'
        /// </summary>
        [JsonProperty(PropertyName = "documentFormat")]
        public string DocumentFormat { get; set; }

        /// <summary>
        /// Gets or sets data to be merge into document.
        /// </summary>
        [JsonProperty(PropertyName = "mergeData")]
        public object MergeData { get; set; }

        /// <summary>
        /// Gets or sets URL that is going to be called when document
        /// generation completes.
        /// </summary>
        [JsonProperty(PropertyName = "callbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if document generation should be run
        /// in diagnostic mode.
        /// </summary>
        [JsonProperty(PropertyName = "debug")]
        public bool? Debug { get; set; }

        /// <summary>
        /// Gets or sets identifier of sign configuration to be used.
        /// </summary>
        [JsonProperty(PropertyName = "signConfigurationId")]
        public System.Guid? SignConfigurationId { get; set; }

    }
}
